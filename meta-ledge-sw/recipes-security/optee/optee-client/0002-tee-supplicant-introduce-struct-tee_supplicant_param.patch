From 876b1ae719e12890ddd96e85cd4e9862dab46448 Mon Sep 17 00:00:00 2001
From: Ondrej Kubik <ondrej.kubik@canonical.com>
Date: Thu, 3 Feb 2022 21:31:04 +0000
Subject: [PATCH 2/6] tee-supplicant: introduce struct tee_supplicant_params
 for global config

Signed-off-by: Ondrej Kubik <ondrej.kubik@canonical.com>
Reviewed-by: Jerome Forissier <jerome@forissier.org>
---
 tee-supplicant/src/plugin.c         | 5 +++--
 tee-supplicant/src/tee_supp_fs.c    | 5 +++--
 tee-supplicant/src/tee_supplicant.c | 9 ++++++---
 tee-supplicant/src/tee_supplicant.h | 9 +++++++++
 4 files changed, 21 insertions(+), 7 deletions(-)

diff --git a/tee-supplicant/src/plugin.c b/tee-supplicant/src/plugin.c
index 2769baa..c3cbe16 100644
--- a/tee-supplicant/src/plugin.c
+++ b/tee-supplicant/src/plugin.c
@@ -113,9 +113,10 @@ TEEC_Result plugin_load_all(void)
 	TEEC_Result teec_res = TEEC_SUCCESS;
 	struct dirent *entry = NULL;
 
-	dir = opendir(TEE_PLUGIN_LOAD_PATH);
+	dir = opendir(supplicant_params.plugin_load_path);
+
 	if (!dir) {
-		IMSG("could not open directory %s", TEE_PLUGIN_LOAD_PATH);
+		IMSG("could not open directory %s", supplicant_params.plugin_load_path);
 
 		/* don't generate error if there is no the dir */
 		return TEEC_SUCCESS;
diff --git a/tee-supplicant/src/tee_supp_fs.c b/tee-supplicant/src/tee_supp_fs.c
index 5580ba9..e6a587a 100644
--- a/tee-supplicant/src/tee_supp_fs.c
+++ b/tee-supplicant/src/tee_supp_fs.c
@@ -121,7 +121,8 @@ static int tee_supp_fs_init(void)
 	size_t n = 0;
 	mode_t mode = 0700;
 
-	n = snprintf(tee_fs_root, sizeof(tee_fs_root), "%s/", TEE_FS_PARENT_PATH);
+	n = snprintf(tee_fs_root, sizeof(tee_fs_root), "%s/", supplicant_params.fs_parent_path);
+
 	if (n >= sizeof(tee_fs_root))
 		return -1;
 
@@ -613,7 +614,7 @@ TEEC_Result tee_supp_fs_process(size_t num_params,
 	if (strlen(tee_fs_root) == 0) {
 		if (tee_supp_fs_init() != 0) {
 			EMSG("error tee_supp_fs_init: failed to create %s/",
-				TEE_FS_PARENT_PATH);
+				tee_fs_root);
 			memset(tee_fs_root, 0, sizeof(tee_fs_root));
 			return TEEC_ERROR_STORAGE_NOT_AVAILABLE;
 		}
diff --git a/tee-supplicant/src/tee_supplicant.c b/tee-supplicant/src/tee_supplicant.c
index 1da3995..d083b3e 100644
--- a/tee-supplicant/src/tee_supplicant.c
+++ b/tee-supplicant/src/tee_supplicant.c
@@ -98,7 +98,11 @@ struct param_value {
 static pthread_mutex_t shm_mutex = PTHREAD_MUTEX_INITIALIZER;
 static struct tee_shm *shm_head;
 
-static const char *ta_dir;
+struct tee_supplicant_params supplicant_params = {
+	.ta_dir = "optee_armtz",
+	.plugin_load_path = TEE_PLUGIN_LOAD_PATH,
+	.fs_parent_path  = TEE_FS_PARENT_PATH,
+};
 
 static void *thread_main(void *a);
 
@@ -290,7 +294,7 @@ static uint32_t load_ta(size_t num_params, struct tee_ioctl_param *params)
 	uuid_from_octets(&uuid, (void *)val_cmd);
 
 	size = shm_ta.size;
-	ta_found = TEECI_LoadSecureModule(ta_dir, &uuid, shm_ta.buffer, &size);
+	ta_found = TEECI_LoadSecureModule(supplicant_params.ta_dir, &uuid, shm_ta.buffer, &size);
 	if (ta_found != TA_BINARY_FOUND) {
 		EMSG("  TA not found");
 		return TEEC_ERROR_ITEM_NOT_FOUND;
@@ -453,7 +457,6 @@ static int open_dev(const char *devname, uint32_t *gen_caps)
 	if (vers.impl_id != TEE_IMPL_ID_OPTEE)
 		goto err;
 
-	ta_dir = "optee_armtz";
 	if (gen_caps)
 		*gen_caps = vers.gen_caps;
 
diff --git a/tee-supplicant/src/tee_supplicant.h b/tee-supplicant/src/tee_supplicant.h
index 11f2b80..b72faec 100644
--- a/tee-supplicant/src/tee_supplicant.h
+++ b/tee-supplicant/src/tee_supplicant.h
@@ -38,6 +38,15 @@
 
 struct tee_ioctl_param;
 
+/* Global tee-supplicant parameters */
+struct tee_supplicant_params {
+    const char *ta_dir;
+    const char *plugin_load_path;
+    const char *fs_parent_path;
+};
+
+extern struct tee_supplicant_params supplicant_params;
+
 bool tee_supp_param_is_memref(struct tee_ioctl_param *param);
 bool tee_supp_param_is_value(struct tee_ioctl_param *param);
 void *tee_supp_param_to_va(struct tee_ioctl_param *param);
-- 
2.25.1

