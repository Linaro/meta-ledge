From 179d212d6aed75267e580e00b924f9e50cf4a609 Mon Sep 17 00:00:00 2001
From: Jerome Forissier <jerome.forissier@linaro.org>
Date: Fri, 18 Mar 2022 10:55:43 +0100
Subject: [PATCH 1/3] tee-supplicant: rpmb: introduce readn() wrapper to the
 read() syscall

read_cid() obtains the ID of the eMMC device by reading from sysfs with
the read() function. Two bytes are read at a time but short reads (i.e.,
when only one byte is returned) and EINTR are not handled. Although I
*think* these situation cannot happen with sysfs, I was unable to find
any guarantee that it is the case. Therefore, introduce a readn()
function which does exactly that.

Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
Acked-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 tee-supplicant/src/rpmb.c | 37 ++++++++++++++++++++++++++++++++++---
 1 file changed, 34 insertions(+), 3 deletions(-)

diff --git a/tee-supplicant/src/rpmb.c b/tee-supplicant/src/rpmb.c
index 7418e239..a95c60bd 100644
--- a/tee-supplicant/src/rpmb.c
+++ b/tee-supplicant/src/rpmb.c
@@ -201,6 +201,35 @@ static void close_mmc_fd(int fd)
 	close(fd);
 }
 
+/*
+ * Read @n bytes from @fd, takes care of short reads and EINTR.
+ * Adapted from “Advanced Programming In the UNIX Environment” by W. Richard
+ * Stevens and Stephen A. Rago, 2013, 3rd Edition, Addison-Wesley
+ * (EINTR handling was added)
+ */
+static ssize_t readn(int fd, void *ptr, size_t n)
+{
+	size_t nleft = n;
+	ssize_t nread = 0;
+	uint8_t *p = ptr;
+
+	while (nleft > 0) {
+		if ((nread = read(fd, p, nleft)) < 0) {
+			if (errno == EINTR)
+				continue;
+			if (nleft == n)
+				return -1; /* error, nothing read, return -1 */
+			else
+				break; /* error, return amount read so far */
+		} else if (nread == 0) {
+			break; /* EOF */
+		}
+		nleft -= nread;
+		p += nread;
+	}
+	return n - nleft; /* return >= 0 */
+}
+
 /* Device Identification (CID) register is 16 bytes. It is read from sysfs. */
 static uint32_t read_cid(uint16_t dev_id, uint8_t *cid)
 {
@@ -220,9 +249,11 @@ static uint32_t read_cid(uint16_t dev_id, uint8_t *cid)
 	}
 
 	for (i = 0; i < 16; i++) {
-		st = read(fd, hex, 2);
-		if (st < 0) {
-			EMSG("Read CID error (%s)", strerror(errno));
+		st = readn(fd, hex, 2);
+		if (st != 2) {
+			EMSG("Read CID error");
+			if (errno)
+				EMSG("%s", strerror(errno));
 			res = TEEC_ERROR_NO_DATA;
 			goto err;
 		}

From 319ed5ef6f9cfb1f3457d643315172231ccea861 Mon Sep 17 00:00:00 2001
From: Jerome Forissier <jerome.forissier@linaro.org>
Date: Fri, 18 Mar 2022 11:14:19 +0100
Subject: [PATCH 2/3] tee-supplicant: rpmb: read CID in one go

Introduce read_cid_str() to read the whole eMMC CID from sysfs in one
go rather than doing it two bytes at a time. This function will come
in handy in the next commit.

Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Acked-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 tee-supplicant/src/rpmb.c | 81 +++++++++++++++++++++++++++++----------
 1 file changed, 60 insertions(+), 21 deletions(-)

diff --git a/tee-supplicant/src/rpmb.c b/tee-supplicant/src/rpmb.c
index a95c60bd..6bd97ca4 100644
--- a/tee-supplicant/src/rpmb.c
+++ b/tee-supplicant/src/rpmb.c
@@ -66,7 +66,8 @@ struct rpmb_req {
 
 /* Response to device info request */
 struct rpmb_dev_info {
-	uint8_t cid[16];
+#define RPMB_CID_SZ 16
+	uint8_t cid[RPMB_CID_SZ];
 	uint8_t rpmb_size_mult;	/* EXT CSD-slice 168: RPMB Size */
 	uint8_t rel_wr_sec_c;	/* EXT CSD-slice 222: Reliable Write Sector */
 				/*                    Count */
@@ -230,41 +231,79 @@ static ssize_t readn(int fd, void *ptr, size_t n)
 	return n - nleft; /* return >= 0 */
 }
 
-/* Device Identification (CID) register is 16 bytes. It is read from sysfs. */
-static uint32_t read_cid(uint16_t dev_id, uint8_t *cid)
+/* Size of CID printed in hexadecimal */
+#define CID_STR_SZ (2 * RPMB_CID_SZ)
+
+static TEEC_Result read_cid_str(uint16_t dev_id, char cid[CID_STR_SZ + 1])
 {
 	TEEC_Result res = TEEC_ERROR_GENERIC;
 	char path[48] = { 0 };
-	char hex[3] = { 0 };
-	int st = 0;
 	int fd = 0;
-	int i = 0;
+	int st = 0;
 
 	snprintf(path, sizeof(path),
 		 "/sys/class/mmc_host/mmc%u/mmc%u:0001/cid", dev_id, dev_id);
 	fd = open(path, O_RDONLY);
-	if (fd < 0) {
-		EMSG("Could not open %s (%s)", path, strerror(errno));
+	if (fd < 0)
 		return TEEC_ERROR_ITEM_NOT_FOUND;
-	}
-
-	for (i = 0; i < 16; i++) {
-		st = readn(fd, hex, 2);
-		if (st != 2) {
-			EMSG("Read CID error");
-			if (errno)
-				EMSG("%s", strerror(errno));
-			res = TEEC_ERROR_NO_DATA;
-			goto err;
-		}
-		cid[i] = (uint8_t)strtol(hex, NULL, 16);
+	st = readn(fd, cid, CID_STR_SZ);
+	if (st != CID_STR_SZ) {
+		EMSG("Read CID error");
+		if (errno)
+			EMSG("%s", strerror(errno));
+		res = TEEC_ERROR_NO_DATA;
+		goto out;
 	}
 	res = TEEC_SUCCESS;
-err:
+out:
 	close(fd);
 	return res;
 }
 
+static int hexchar2int(char c)
+{
+	if (c >= '0' && c <= '9')
+		return c - '0';
+	if (c >= 'a' && c <= 'f')
+		return c - 'a' + 10;
+	if (c >= 'A' && c <= 'F')
+		return c - 'A' + 10;
+	return -1;
+}
+
+static int hexbyte2int(char *hex)
+{
+	int v1 = hexchar2int(hex[0]);
+	int v2 = hexchar2int(hex[1]);
+
+	if (v1 < 0 || v2 < 0)
+		return -1;
+	return 16 * v1 + v2;
+}
+
+/* Device Identification (CID) register is 16 bytes. It is read from sysfs. */
+static TEEC_Result read_cid(uint16_t dev_id, uint8_t *cid)
+{
+	TEEC_Result res = TEEC_ERROR_GENERIC;
+	char cid_str[CID_STR_SZ + 1] = { 0 };
+	int i = 0;
+	int v = 0;
+
+	res = read_cid_str(dev_id, cid_str);
+	if (res)
+		return res;
+
+	for (i = 0; i < RPMB_CID_SZ; i++) {
+		v = hexbyte2int(cid_str + 2 * i);
+		if (v < 0) {
+			EMSG("Invalid CID string: %s", cid_str);
+			return TEEC_ERROR_NO_DATA;
+		}
+		cid[i] = v;
+	}
+	return TEEC_SUCCESS;
+}
+
 #else /* RPMB_EMU */
 
 #define IOCTL(fd, request, ...) ioctl_emu((fd), (request), ##__VA_ARGS__)

From f75c5f30b4eb773dfa8fa95a3bd878631d8318da Mon Sep 17 00:00:00 2001
From: Jerome Forissier <jerome.forissier@linaro.org>
Date: Wed, 16 Mar 2022 19:33:26 +0100
Subject: [PATCH 3/3] tee-supplicant: add --rpmb-cid command line option
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In OP-TEE OS, the RPMB device used for secure storage is selected at
compile time via an integer identifier (CFG_RPMB_FS_DEV_ID). As
mentioned in [1], this ID is assigned by the Linux kernel and is used
when tee-supplicant opens the device on behalf of OP-TEE. There are a
couple of issues with that:

1. U-Boot and Linux may assign a different number to the same RPMB
device. Therefore, the TEE supplicant components in U-Boot and Linux
cannot both trust the ID given by OP-TEE.

2. If a system has several RPMB devices, and even if we ignore removable
ones, there is no guarantee that the devices will always be enumerated
in the same order by the kernel on boot. This results in different
device numbers. I observed this behavior on a Hikey620 board with an
external eMMC module plugged into the micro SD slot. Sometimes the
on-board RPMB (which I don’t use for testing) is /dev/mmcblk0rpmb and
the external one is /dev/mmcblk1rpmb; sometimes it is the other way
around.

In order to remove any ambiguity, introduce a new command line argument
to tee-supplicant: --rpmb-cid <CID>. <CID> is the device identification
register of the eMMC device that OP-TEE should use for RPMB. It is
unique for every flash device. When --rpmb-cid is given, the device
number given by OP-TEE is ignored and the specified device is used
instead. <CID> can be found in sysfs, for example:

 # Read the CID of MMC device 0. Its RPMB partition is /dev/mmcblk0rpmb.
 $ cat /sys/class/mmc_host/mmc0/mmc0\:0001/cid
 11010030303847453000e0a18ceb13df
 $

Link: https://github.com/OP-TEE/optee_os/blob/3.16.0/mk/config.mk#L159-L162
Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Acked-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 tee-supplicant/src/rpmb.c           | 80 +++++++++++++++++++++++++++--
 tee-supplicant/src/tee_supplicant.c |  6 +++
 tee-supplicant/src/tee_supplicant.h |  1 +
 3 files changed, 84 insertions(+), 3 deletions(-)

diff --git a/tee-supplicant/src/rpmb.c b/tee-supplicant/src/rpmb.c
index 6bd97ca4..2c0da7b5 100644
--- a/tee-supplicant/src/rpmb.c
+++ b/tee-supplicant/src/rpmb.c
@@ -25,6 +25,7 @@
  * POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <dirent.h>
 #include <fcntl.h>
 #include <linux/types.h>
 #include <linux/mmc/ioctl.h>
@@ -304,6 +305,70 @@ static TEEC_Result read_cid(uint16_t dev_id, uint8_t *cid)
 	return TEEC_SUCCESS;
 }
 
+/*
+ * - If --rpmb-cid is given, find the eMMC RPMB device number with the specified
+ * CID, cache the number, copy it to @ndev_id and return true. If not found
+ * return false.
+ * - If --rpmb-cid is not given, copy @dev_id to @ndev_id and return true.
+ */
+static bool remap_rpmb_dev_id(uint16_t dev_id, uint16_t *ndev_id)
+{
+	TEEC_Result res = TEEC_ERROR_GENERIC;
+	static bool found = false;
+	static bool err = false;
+	static uint16_t id = 0;
+	char cid[33] = { 0 };
+	struct dirent *dent = NULL;
+	DIR *dir = NULL;
+	int num = 0;
+
+	if (err || found)
+		goto out;
+
+	if (!supplicant_params.rpmb_cid) {
+		id = dev_id;
+		found = true;
+		goto out;
+	}
+
+	dir = opendir("/sys/class/mmc_host");
+	if (!dir) {
+		EMSG("Could not open /sys/class/mmc_host (%s)",
+		     strerror(errno));
+		err = true;
+		goto out;
+	}
+
+	while ((dent = readdir(dir))) {
+		if (sscanf(dent->d_name, "%*[^0123456789]%d", &num) != 1)
+			continue;
+		if (num > UINT16_MAX) {
+			EMSG("Too many MMC devices");
+			err = true;
+			break;
+		}
+		id = (uint16_t)num;
+		res = read_cid_str(id, cid);
+		if (res)
+			continue;
+		if (strcmp(cid, supplicant_params.rpmb_cid))
+			continue;
+		fprintf(stderr, "RPMB device %s is at /dev/mmcblk%urpmb\n",
+			cid, id);
+		found = true;
+		break;
+	}
+
+	closedir(dir);
+
+	if (!found)
+		err = true;
+out:
+	if (found)
+		*ndev_id = id;
+	return found;
+}
+
 #else /* RPMB_EMU */
 
 #define IOCTL(fd, request, ...) ioctl_emu((fd), (request), ##__VA_ARGS__)
@@ -692,6 +757,12 @@ static void close_mmc_fd(int fd)
 	(void)fd;
 }
 
+static bool remap_rpmb_dev_id(uint16_t dev_id, uint16_t *ndev_id)
+{
+	*ndev_id = dev_id;
+	return true;
+}
+
 #endif /* RPMB_EMU */
 
 /*
@@ -876,17 +947,21 @@ static uint32_t rpmb_process_request_unlocked(void *req, size_t req_size,
 	struct rpmb_req *sreq = req;
 	size_t req_nfrm = 0;
 	size_t rsp_nfrm = 0;
+	uint16_t dev_id = 0;
 	uint32_t res = 0;
 	int fd = 0;
 
 	if (req_size < sizeof(*sreq))
 		return TEEC_ERROR_BAD_PARAMETERS;
 
+	if (!remap_rpmb_dev_id(sreq->dev_id, &dev_id))
+		return TEEC_ERROR_ITEM_NOT_FOUND;
+
 	switch (sreq->cmd) {
 	case RPMB_CMD_DATA_REQ:
 		req_nfrm = (req_size - sizeof(struct rpmb_req)) / 512;
 		rsp_nfrm = rsp_size / 512;
-		fd = mmc_rpmb_fd(sreq->dev_id);
+		fd = mmc_rpmb_fd(dev_id);
 		if (fd < 0)
 			return TEEC_ERROR_BAD_PARAMETERS;
 		res = rpmb_data_req(fd, RPMB_REQ_DATA(req), req_nfrm, rsp,
@@ -899,8 +974,7 @@ static uint32_t rpmb_process_request_unlocked(void *req, size_t req_size,
 			EMSG("Invalid req/rsp size");
 			return TEEC_ERROR_BAD_PARAMETERS;
 		}
-		res = rpmb_get_dev_info(sreq->dev_id,
-					(struct rpmb_dev_info *)rsp);
+		res = rpmb_get_dev_info(dev_id, (struct rpmb_dev_info *)rsp);
 		break;
 
 	default:
diff --git a/tee-supplicant/src/tee_supplicant.c b/tee-supplicant/src/tee_supplicant.c
index 033297c1..55924c48 100644
--- a/tee-supplicant/src/tee_supplicant.c
+++ b/tee-supplicant/src/tee_supplicant.c
@@ -495,6 +495,8 @@ static int usage(int status)
 			supplicant_params.ta_dir);
 	fprintf(stderr, "\t-p, --plugin-path: plugin load path [%s]\n",
 			supplicant_params.plugin_load_path);
+	fprintf(stderr, "\t-r, --rpmb-cid: RPMB device identification register "
+			"(CID) in hexadecimal\n");
 	return status;
 }
 
@@ -713,6 +715,7 @@ int main(int argc, char *argv[])
 		{ "fs-parent-path",  required_argument, 0, 'f' },
 		{ "ta-dir",          required_argument, 0, 't' },
 		{ "plugin-path",     required_argument, 0, 'p' },
+		{ "rpmb-cid",        required_argument, 0, 'r' },
 		{ 0, 0, 0, 0 }
 	};
 
@@ -734,6 +737,9 @@ int main(int argc, char *argv[])
 			case 'p':
 				supplicant_params.plugin_load_path = optarg;
 				break;
+			case 'r':
+				supplicant_params.rpmb_cid = optarg;
+				break;
 			default:
 				return usage(EXIT_FAILURE);
 		}
diff --git a/tee-supplicant/src/tee_supplicant.h b/tee-supplicant/src/tee_supplicant.h
index b72faecd..cf98ac83 100644
--- a/tee-supplicant/src/tee_supplicant.h
+++ b/tee-supplicant/src/tee_supplicant.h
@@ -43,6 +43,7 @@ struct tee_supplicant_params {
     const char *ta_dir;
     const char *plugin_load_path;
     const char *fs_parent_path;
+    const char *rpmb_cid;
 };
 
 extern struct tee_supplicant_params supplicant_params;
