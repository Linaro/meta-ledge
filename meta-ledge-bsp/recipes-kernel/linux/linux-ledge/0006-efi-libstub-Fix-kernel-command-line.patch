From bc7d3d78fc4f8c2c3beec67f9658ca980f53e2eb Mon Sep 17 00:00:00 2001
From: Ilias Apalodimas <ilias.apalodimas@linaro.org>
Date: Fri, 24 Jan 2020 17:57:08 +0200
Subject: [PATCH] efi: libstub: Fix kernel command line

On our parsing we never included the kernel command line for anything
apart from efi= related args. As a result adding initrd= on the firmware
works fine, but fails if it's specified in the kernel command-line args.
Also the current code doesn't fully respect CONFIG_CMDLINE_FORCE.
Provide a function that will concatenate the efi cmd line and kernel cmd
line when appropriate.
If CONFIG_CMDLINE_EXTEND is selected command line will be extended.
If CONFIG_CMDLINE_FORCE is selected the .config command line will be
forced regardless.
If CONFIG_CMDLINE_FROM_BOOTLOADER is selected only the firmware
arguments will be passed, unless empty. In that case we'll use whatever
the kernel built-in cmd line provides.

Signed-off-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
---
 drivers/firmware/efi/libstub/arm-stub.c | 87 ++++++++++++++++++++-----
 1 file changed, 69 insertions(+), 18 deletions(-)

diff --git a/drivers/firmware/efi/libstub/arm-stub.c b/drivers/firmware/efi/libstub/arm-stub.c
index 817237ce2420..a68609670992 100644
--- a/drivers/firmware/efi/libstub/arm-stub.c
+++ b/drivers/firmware/efi/libstub/arm-stub.c
@@ -90,6 +90,47 @@ void install_memreserve_table(efi_system_table_t *sys_table_arg)
 		pr_efi_err(sys_table_arg, "Failed to install memreserve config table!\n");
 }
 
+char *concat_cmd_lines(efi_system_table_t *sys_table_arg, char *efi_cmd_line)
+{
+	char *cmdline;
+	int efi_line_len = strlen(efi_cmd_line);
+	int tot_len = efi_line_len;
+	efi_status_t status;
+
+	/* Ignore the kernel cmdline */
+	if (IS_ENABLED(CONFIG_CMDLINE_FROM_BOOTLOADER) && efi_line_len)
+		return efi_cmd_line;
+
+	if (IS_ENABLED(CONFIG_CMDLINE_EXTEND)) {
+		/* white space + NUL termination */
+		tot_len += strlen(CONFIG_CMDLINE) + 2;
+	} else if (IS_ENABLED(CONFIG_CMDLINE_FORCE) ||
+		 (IS_ENABLED(CONFIG_CMDLINE_FROM_BOOTLOADER) && !efi_line_len)) {
+		tot_len = strlen(CONFIG_CMDLINE) + 1;
+		efi_line_len = 0;
+	} else {
+		/* Not all architectures support CONFIG_CMDLINE_* treat
+		 * everything else as extend
+		 */
+		tot_len += strlen(CONFIG_CMDLINE) + 2;
+	}
+
+	status = efi_call_early(allocate_pool, EFI_LOADER_DATA, tot_len,
+				(void **)&cmdline);
+	if (status != EFI_SUCCESS)
+		return NULL;
+
+	if (efi_line_len) {
+		memcpy(cmdline, efi_cmd_line, efi_line_len);
+		*(cmdline + efi_line_len) = ' ';
+		efi_line_len++;
+	}
+
+	memcpy(cmdline + efi_line_len, CONFIG_CMDLINE,
+	       strlen(CONFIG_CMDLINE) + 1);
+
+	return cmdline;
+}
 
 /*
  * This function handles the architcture specific differences between arm and
@@ -110,7 +151,7 @@ efi_status_t handle_kernel_image(efi_system_table_t *sys_table,
  * for both archictectures, with the arch-specific code provided in the
  * handle_kernel_image() function.
  */
-unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
+unsigned long efi_entry(void *handle, efi_system_table_t *sys_table_arg,
 			       unsigned long *image_addr)
 {
 	efi_loaded_image_t *image;
@@ -122,14 +163,16 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 	u64 initrd_size = 0;
 	unsigned long fdt_addr = 0;  /* Original DTB */
 	unsigned long fdt_size = 0;
-	char *cmdline_ptr = NULL;
-	int cmdline_size = 0;
+	char *efi_cmdline_ptr = NULL;
+	char *full_cmdline_ptr = NULL; /* Include kernel cmdline */
+	int efi_cmdline_size = 0;
 	unsigned long new_fdt_addr;
 	efi_guid_t loaded_image_proto = LOADED_IMAGE_PROTOCOL_GUID;
 	unsigned long reserve_addr = 0;
 	unsigned long reserve_size = 0;
 	enum efi_secureboot_mode secure_boot;
 	struct screen_info *si;
+	efi_system_table_t *sys_table = sys_table_arg;
 
 	/* Check if we were booted by the EFI firmware */
 	if (sys_table->hdr.signature != EFI_SYSTEM_TABLE_SIGNATURE)
@@ -162,19 +205,20 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 	 * protocol. We are going to copy the command line into the
 	 * device tree, so this can be allocated anywhere.
 	 */
-	cmdline_ptr = efi_convert_cmdline(sys_table, image, &cmdline_size);
-	if (!cmdline_ptr) {
+	efi_cmdline_ptr = efi_convert_cmdline(sys_table, image,
+					      &efi_cmdline_size);
+	if (!efi_cmdline_ptr) {
 		pr_efi_err(sys_table, "getting command line via LOADED_IMAGE_PROTOCOL\n");
 		goto fail;
 	}
 
-	if (IS_ENABLED(CONFIG_CMDLINE_EXTEND) ||
-	    IS_ENABLED(CONFIG_CMDLINE_FORCE) ||
-	    cmdline_size == 0)
-		efi_parse_options(CONFIG_CMDLINE);
+	full_cmdline_ptr = concat_cmd_lines(sys_table, efi_cmdline_ptr);
+	if (!full_cmdline_ptr) {
+		pr_efi_err(sys_table, "Failed to get a proper commandline\n");
+		goto fail_free_cmdline;
+	}
 
-	if (!IS_ENABLED(CONFIG_CMDLINE_FORCE) && cmdline_size > 0)
-		efi_parse_options(cmdline_ptr);
+	efi_parse_options(full_cmdline_ptr);
 
 	pr_efi(sys_table, "Booting Linux Kernel...\n");
 
@@ -186,7 +230,7 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 				     dram_base, image);
 	if (status != EFI_SUCCESS) {
 		pr_efi_err(sys_table, "Failed to relocate kernel\n");
-		goto fail_free_cmdline;
+		goto fail_free_screeninfo;
 	}
 
 	efi_retrieve_tpm2_eventlog(sys_table);
@@ -203,10 +247,10 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 	 */
 	if (!IS_ENABLED(CONFIG_EFI_ARMSTUB_DTB_LOADER) ||
 	     secure_boot != efi_secureboot_mode_disabled) {
-		if (strstr(cmdline_ptr, "dtb="))
+		if (strstr(full_cmdline_ptr, "dtb="))
 			pr_efi(sys_table, "Ignoring DTB from command line.\n");
 	} else {
-		status = handle_cmdline_files(sys_table, image, cmdline_ptr,
+		status = handle_cmdline_files(sys_table, image, full_cmdline_ptr,
 					      "dtb=",
 					      ~0UL, &fdt_addr, &fdt_size);
 
@@ -228,7 +272,7 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 	if (!fdt_addr)
 		pr_efi(sys_table, "Generating empty DTB\n");
 
-	status = handle_cmdline_files(sys_table, image, cmdline_ptr, "initrd=",
+	status = handle_cmdline_files(sys_table, image, full_cmdline_ptr, "initrd=",
 				      efi_get_max_initrd_addr(dram_base,
 							      *image_addr),
 				      (unsigned long *)&initrd_addr,
@@ -261,10 +305,14 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 
 	install_memreserve_table(sys_table);
 
+	/* done with the full cmd line ptr */
+	if (full_cmdline_ptr != efi_cmdline_ptr)
+		efi_call_early(free_pool, (void *)full_cmdline_ptr);
+
 	new_fdt_addr = fdt_addr;
 	status = allocate_new_fdt_and_exit_boot(sys_table, handle,
 				&new_fdt_addr, efi_get_max_fdt_addr(dram_base),
-				initrd_addr, initrd_size, cmdline_ptr,
+				initrd_addr, initrd_size, efi_cmdline_ptr,
 				fdt_addr, fdt_size);
 
 	/*
@@ -283,9 +331,12 @@ unsigned long efi_entry(void *handle, efi_system_table_t *sys_table,
 fail_free_image:
 	efi_free(sys_table, image_size, *image_addr);
 	efi_free(sys_table, reserve_size, reserve_addr);
-fail_free_cmdline:
+fail_free_screeninfo:
 	free_screen_info(sys_table, si);
-	efi_free(sys_table, cmdline_size, (unsigned long)cmdline_ptr);
+	if (full_cmdline_ptr != efi_cmdline_ptr)
+		efi_call_early(free_pool, (void *)full_cmdline_ptr);
+fail_free_cmdline:
+	efi_free(sys_table, efi_cmdline_size, (unsigned long)efi_cmdline_ptr);
 fail:
 	return EFI_ERROR;
 }
-- 
2.25.0

