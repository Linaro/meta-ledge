From f736ea3b9de7a82d0c6cbba2cc32bda0777c3d1b Mon Sep 17 00:00:00 2001
From: Sughosh Ganu <sughosh.ganu@linaro.org>
Date: Wed, 20 Jan 2021 16:59:37 +0530
Subject: [PATCH 1/2] HACK: enable pl011 and secure flash

- the pl011 qemu device is mapped in the StMM S1
  - pa set to 0x9040000

- the secure flash device is mapped in the StMM S1
  - pa 0x500000 with size 0x200000

- Increase the heap size alloted to StandaloneMm to 698 pages. Memory
  allocation with the current value fails

Signed-off-by: Sughosh Ganu <sughosh.ganu@linaro.org>
---
 core/arch/arm/kernel/stmm_sp.c | 79 +++++++++++++++++++++++++++++++++-
 1 file changed, 78 insertions(+), 1 deletion(-)

diff --git a/core/arch/arm/kernel/stmm_sp.c b/core/arch/arm/kernel/stmm_sp.c
index 895d7df2..5addf06a 100644
--- a/core/arch/arm/kernel/stmm_sp.c
+++ b/core/arch/arm/kernel/stmm_sp.c
@@ -67,7 +67,7 @@ static const uint16_t mem_mgr_id = 3U;
 static const uint16_t ffa_storage_id = 4U;
 
 static const unsigned int stmm_stack_size = 4 * SMALL_PAGE_SIZE;
-static const unsigned int stmm_heap_size = 398 * SMALL_PAGE_SIZE;
+static const unsigned int stmm_heap_size = 698 * SMALL_PAGE_SIZE;
 static const unsigned int stmm_sec_buf_size = SMALL_PAGE_SIZE;
 static const unsigned int stmm_ns_comm_buf_size = SMALL_PAGE_SIZE;
 
@@ -214,6 +214,81 @@ static void uncompress_image(void *dst, size_t dst_size, void *src,
 		panic("inflateEnd");
 }
 
+static TEE_Result alloc_and_map_io(struct stmm_ctx *spc, paddr_t pa,
+				   size_t sz, uint32_t prot, vaddr_t *va,
+				   size_t pad_begin, size_t pad_end)
+{
+	struct mobj *mobj;
+	TEE_Result res = TEE_SUCCESS;
+
+	sz = ROUNDUP(sz, SMALL_PAGE_SIZE);
+	mobj = mobj_phys_alloc(pa, sz, TEE_MATTR_CACHE_NONCACHE,
+			       CORE_MEM_TA_RAM);
+	if (!mobj)
+		return TEE_ERROR_OUT_OF_MEMORY;
+
+	res = vm_map_pad(&spc->uctx, va, sz, prot, 0, mobj, 0, pad_begin,
+			 pad_end, 0);
+	if (res)
+		mobj_put(mobj);
+
+	return res;
+}
+
+static TEE_Result alloc_SDP_io(struct stmm_ctx *spc, paddr_t pa,
+			       size_t sz, uint32_t prot, vaddr_t *va,
+			       size_t pad_begin, size_t pad_end,
+			       size_t align)
+{
+	struct mobj *mobj;
+	TEE_Result res = TEE_SUCCESS;
+	*va = 0x0;
+
+	sz = ROUNDUP(sz, SMALL_PAGE_SIZE);
+	mobj = mobj_phys_alloc(pa, sz, 0, CORE_MEM_SDP_MEM);
+
+	if (!mobj)
+		return TEE_ERROR_OUT_OF_MEMORY;
+
+	res = vm_map_pad(&spc->uctx, va, 0x200000,
+			 TEE_MATTR_URW | TEE_MATTR_PRW, 0, mobj,
+			 0, pad_begin, pad_end, align);
+
+	if (res != TEE_SUCCESS) {
+		EMSG("failed to set S1 mapping PA %#lX <-> VA %#lX \n",pa, *va);
+		return TEE_ERROR_OUT_OF_MEMORY;
+	}
+
+	return TEE_SUCCESS;
+}
+
+static TEE_Result hack_map_qemu_pl011(struct stmm_ctx *spc)
+{
+	TEE_Result res;
+	vaddr_t uart_va = 0;
+	res = alloc_and_map_io(spc, 0x09040000, 0x00001000,
+			       TEE_MATTR_URW | TEE_MATTR_PRW,
+			       &uart_va, 0, 0);
+	if (res) {
+		EMSG("failed to alloc_and_map uart");
+		return res;
+	}
+	EMSG("------------------------------uart va=%#"PRIxVA, uart_va);
+
+	// start variable space at 0x500000
+	res = alloc_SDP_io(spc, 0x500000, 0x200000,
+			   TEE_MATTR_URW | TEE_MATTR_PRW,
+			   &uart_va, 0, 0, 0x40000);
+	if (res) {
+		EMSG("failed to alloc_and_map secure flash");
+		return res;
+	}
+
+	EMSG("------------------------------secure flash va=%#"PRIxVA, uart_va);
+
+	return res;
+}
+
 static TEE_Result load_stmm(struct stmm_ctx *spc)
 {
 	struct stmm_boot_info *boot_info = NULL;
@@ -278,6 +353,8 @@ static TEE_Result load_stmm(struct stmm_ctx *spc)
 
 	DMSG("stmm load address %#"PRIxVA, image_addr);
 
+	hack_map_qemu_pl011(spc);
+
 	boot_info = (struct stmm_boot_info *)sec_buf_addr;
 	mp_info = (struct stmm_mp_info *)(boot_info + 1);
 	*boot_info = (struct stmm_boot_info){
-- 
2.17.1

