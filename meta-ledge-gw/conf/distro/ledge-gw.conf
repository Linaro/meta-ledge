DISTRO_NAME = "Ledge Gateway (A Yocto Project Based Distro)"
DISTRO_VERSION = "2.5"
DISTRO_CODENAME = "sumo"

# These default to 'oecore' and 'nodistro'
SDK_NAME_PREFIX = "${DISTRO}"
SDK_VERSION = "${DISTRO_VERSION}"

TARGET_VENDOR = "-linaro"

# defaultsetup.inc gets includes after ${DISTRO}.conf, so we need to set it here
# to make the python below work. Local, site and auto.conf will override it.
TCMODE ?= "default"
TCLIBCAPPEND = ""

# TODO: is that really want we want?
IMAGE_LINGUAS = "en-gb"

# =========================================================================
# DISTRO features
# =========================================================================
DISTRO_FEATURES_append = " alsa "
DISTRO_FEATURES_append = " argp "
DISTRO_FEATURES_append = " ext4 "
DISTRO_FEATURES_append = " largefile "
DISTRO_FEATURES_append = " ipv4 "
DISTRO_FEATURES_append = " ipv6 "
DISTRO_FEATURES_append = " wifi "
DISTRO_FEATURES_append = " bluetooth "
DISTRO_FEATURES_append = " bluez5 "
DISTRO_FEATURES_append = " usrmerge "
DISTRO_FEATURES_append = " pam "

DISTRO_FEATURES_remove = "3g irda pcmcia nfc sysvinit"

# add support of gstreamer
DISTRO_FEATURES_append = " gstreamer "

# add support of wayland
#DISTRO_FEATURES_append = " wayland "

# add support of X11
#DISTRO_FEATURES_append = " x11"
# No need for x11 even for native
DISTRO_FEATURES_NATIVE_remove = "x11"
DISTRO_FEATURES_NATIVESDK_remove = "x11"

# add support of systemd
DISTRO_FEATURES_append = " systemd "
VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = "systemd-compat-units"

# Disabling sysvinit
DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"

# opengl
DISTRO_FEATURES_append = " opengl "

# for docker / virtualization
DISTRO_FEATURES_append = " virtualization "
# =========================================================================
# PACKAGE CONFIG
# =========================================================================
PACKAGECONFIG_append_pn-systemd = " resolved networkd "
PACKAGECONFIG_append_pn-qtbase = " gles2 fontconfig examples"
PACKAGECONFIG_remove_pn-gpsd = "qt"
PACKAGECONFIG_append_pn-gstreamer1.0-plugins-bad = " kms"
PACKAGECONFIG_append_pn-qemu-native = " libusb"

# =========================================================================
# LICENSE FLAGS
# =========================================================================
LICENSE_FLAGS_WHITELIST += "commercial_gstreamer1.0-libav commercial_ffmpeg commercial_x264 non-commercial"

# =========================================================================
# LOCAL / IMAGE configuration
# =========================================================================
# Set GLIBC_GENERATE_LOCALES to the locales you wish to generate should you not
# wish to perform the time-consuming step of generating all LIBC locales.
# NOTE: If removing en_US.UTF-8 you will also need to uncomment, and set
# appropriate value for IMAGE_LINGUAS.
# WARNING: this may break localisation!
GLIBC_GENERATE_LOCALES = "en_GB.UTF-8 en_US.UTF-8"
IMAGE_LINGUAS ?= "en-gb"

# Support of devshell
INHERIT += "devshell"

# Remove the old image before the new one generated to save disk space
RM_OLD_IMAGE = "1"

# Nice debug data
INHERIT += "buildhistory"
BUILDHISTORY_COMMIT = "1"
INHERIT += "image-buildinfo"


# Clean up working directory after build
INHERIT += "rm_work"

# force the usage of debian package
#PACKAGE_CLASSES = "package_deb"

# Avoid to duplicate the rootfs tarball by generating both tar.gz/tar.xz
IMAGE_FSTYPES_remove = "tar.gz"



# =========================================================================
# Coming from osf
# =========================================================================
OSF_LMP_GIT_URL="github.com"
OSF_LMP_GIT_NAMESPACE="OpenSourceFoundries/"

#PREFERRED_PROVIDER_virtual/kernel = "linux-osf"
PREFERRED_PROVIDER_iasl-native = "acpica-native"

# LMP default classes and overwrites
INHERIT += "lmp"

# SOTA
OSTREE_OSNAME = "lmp"
OSTREE_INITRAMFS_IMAGE = "initramfs-ostree-osf-image"
INITRAMFS_IMAGE = "${OSTREE_INITRAMFS_IMAGE}"
OSTREE_INITRAMFS_FSTYPES = "cpio.gz"
OSTREE_KERNEL_ARGS = "root=LABEL=otaroot rootfstype=ext4"
## No need to install the kernel image into the boot partition
IMAGE_BOOT_FILES_remove_sota = " ${KERNEL_IMAGETYPE}"
## Runtime prov by default to allow runtime configuration
SOTA_CLIENT_PROV ?= "aktualizr-runtime-prov"

# General
WKS_FILE_DEPENDS_BOOTLOADERS_remove = "syslinux systemd-boot"
## We don't use the default efi sota wks file
WKS_FILE_sota_remove = "efiimage-sota.wks"
